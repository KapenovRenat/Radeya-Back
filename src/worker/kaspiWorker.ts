import axios from "axios";
import { Env } from "@config/env";
import { Order } from "@models/orders/Order";
import mongoose from "mongoose";
import cron from "node-cron";

const pretty = (obj: any) => JSON.stringify(obj, null, 2);

// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–º—Å)
const SLEEP_MS = 150;
// –í–∫–ª—é—á–∏—Ç—å –ª–∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
// (!) –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –º–Ω–æ–≥–æ ‚Äî –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å false. –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ñ–ª–∞–≥ –∏–∑ .env
const FETCH_PRODUCT_DETAILS = false;

const sleep = (ms: number) => new Promise(res => setTimeout(res, ms));

export const kaspiApi = axios.create({
    baseURL: Env.KASPI_API_URL, // –Ω–∞–ø—Ä–∏–º–µ—Ä: https://kaspi.kz/shop/api/v2
    headers: {
        "X-Auth-Token": Env.KASPI_API_TOKEN,
        "Accept": "application/vnd.api+json; charset=UTF-8",
    },
    timeout: 20000,
});

const paramsSerializer = { serialize: (p: any) => new URLSearchParams(p).toString() };

/** –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ (orderentries) —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π */
async function fetchOrderEntries(orderId: string) {
    const PAGE_SIZE = 100;
    let page = 0;
    const out: any[] = [];

    while (true) {
        const params: Record<string, any> = {
            "page[number]": page,
            "page[size]": PAGE_SIZE,
        };

        await sleep(SLEEP_MS);
        const { data } = await kaspiApi.get(`/orders/${orderId}/entries`, { params, paramsSerializer });

        const entries: any[] = data?.data ?? data?.content ?? [];
        out.push(...entries);

        const hasNextLink = Boolean(data?.links?.next) || Boolean(data?.links?.pagination?.next);
        if (entries.length < PAGE_SIZE || !hasNextLink) break;

        page += 1;
    }

    return out;
}

/** –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∑–∞ –æ–∫—Ç—è–±—Ä—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ç–µ–∫—É—â–∏–π) —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ */
export async function fetchAllOrders(year = new Date().getFullYear()) {
    const now = Date.now();
    const HOUR = 60 * 60 * 1000;

    const start: number = now - HOUR; // —á–∞—Å –Ω–∞–∑–∞–¥
    const end: number = now;          // —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

    const MAX_WINDOW: number = 14 * 24 * 60 * 60 * 1000; // –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –Ω–µ –≤–ª–∏—è–µ—Ç
    const PAGE_SIZE: number = 100;
    const all: any[] = [];

    let winFrom = start;
    while (winFrom <= end) {
        const winTo = Math.min(winFrom + MAX_WINDOW - 1, end);

        let page = 0;
        while (true) {
            const params: Record<string, any> = {
                "page[number]": page,
                "page[size]": PAGE_SIZE,
                "filter[orders][creationDate][$ge]": winFrom,
                "filter[orders][creationDate][$le]": winTo,
                // –º–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É:
                // "filter[orders][state]": "NEW" | "DELIVERY" | "KASPI_DELIVERY" | "PICKUP" | "SIGN_REQUIRED" | "ARCHIVE"
            };

            await sleep(SLEEP_MS);
            const { data } = await kaspiApi.get("/orders", { params, paramsSerializer });

            const items: any[] = data?.data ?? data?.content ?? [];
            for (const item of items) {
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–∫–∞–∑
                // 1) –¢—è–Ω–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
                const entries = await fetchOrderEntries(item.id);
                const productsOrder = entries.map((entry: any) => {
                    return {
                        prId: entry.id,              // id –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ Kaspi
                        type: entry.type,                    // –∫–æ–ª-–≤–æ
                        ...entry.attributes,
                        product: {
                            id: entry.relationships.product.data.id,
                            type: entry.relationships.product.data.type,
                            link: entry.relationships.product.links.related
                        },
                        deliveryPointOfService: {
                            id: entry.relationships.deliveryPointOfService.data.id,
                            type: entry.relationships.deliveryPointOfService.data.type,
                            link: entry.relationships.deliveryPointOfService.links.related
                        }
                    }
                });
                const orderDoc = {
                    ...item,
                    ...item.attributes,   // –∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ
                    objects: productsOrder
                };

                //
                // 3) –ü–∏—à–µ–º –∑–∞–∫–∞–∑ —Å objects –≤ Mongo
                await Order.updateOne(
                    { kmId: item.id },
                    { $set: { ...orderDoc } },
                    { upsert: true }
                );

                all.push(orderDoc);
                // –ú–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–∫–∞–∑–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞)
                await sleep(SLEEP_MS);
            }

            const hasNextLink =
                Boolean(data?.links?.next) || Boolean(data?.links?.pagination?.next);

            if (items.length < PAGE_SIZE || !hasNextLink) break;
            page += 1;
        }

        winFrom = winTo + 1; // —Å–ª–µ–¥—É—é—â–µ–µ –æ–∫–Ω–æ
    }

    console.log(`‚úÖ –°–æ–±—Ä–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –æ–∫—Ç—è–±—Ä—å ${year}:`, all.length);
    return all;
}

async function runJob() {
    try {
        console.log("üöÄ Kaspi worker started:", new Date().toLocaleString());

        // —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ Mongo –ø–æ–¥–∫–ª—é—á–µ–Ω
        if (mongoose.connection.readyState === 0) {
            await mongoose.connect(Env.MONGODB_URI);
            console.log("‚úÖ MongoDB connected");
        }

        await fetchAllOrders().then(() => console.log('‚úÖ –í—Å–µ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ!')) // <-- —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—Å—ë –¥–µ–ª–∞–µ—Ç
        console.log("‚úÖ Kaspi worker finished:", new Date().toLocaleString());
    } catch (err) {
        console.error("‚õî Worker error:", err);
    }
}

cron.schedule('* * * * *' , runJob, {timezone: "Asia/Almaty",}) ;

// --- –µ–¥–∏–Ω–∏—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
// mongoose
//     .connect(Env.MONGODB_URI)
//     .then(() => {
//         console.log("‚úÖ MongoDB connected");
//         fetchAllOrders().then(list => console.log('‚úÖ –í—Å–µ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ!'));
//     })
//     .catch((err) => {
//         console.error("MongoDB connection error:", err);
//         process.exit(1);
//     });
